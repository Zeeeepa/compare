--- gitcompare.py
+++ gitcompare.py
@@ -1591,7 +1591,8 @@
         def perform_removal():
+            temp_branch_name = None
+            temp_ref = None
             try:
                 repo = self.g.get_repo(repo_name)
+                self.status_var.set(f"Getting branch reference for {branch_name}...")
                 
-                # Get the current branch reference
-                branch_ref = repo.get_git_ref(f"heads/{branch_name}")
+                try:
+                    branch_ref = repo.get_git_ref(f"heads/{branch_name}")
+                except GithubException as e:
+                    if e.status == 404:
+                        raise Exception(f"Branch {branch_name} not found")
+                    raise Exception(f"Failed to access branch: {str(e)}")
                 
                 # Create a temporary branch for the operation
                 temp_branch_name = f"temp-remove-commits-{int(datetime.datetime.now().timestamp())}"
-                temp_ref = repo.create_git_ref(f"refs/heads/{temp_branch_name}", branch_ref.object.sha)
+                self.status_var.set(f"Creating temporary branch {temp_branch_name}...")
+                
+                try:
+                    temp_ref = repo.create_git_ref(f"refs/heads/{temp_branch_name}", branch_ref.object.sha)
+                except GithubException as e:
+                    raise Exception(f"Failed to create temporary branch: {str(e)}")
                 
                 # Get all commits in chronological order
-                all_commits = list(repo.get_commits(sha=branch_name))
+                self.status_var.set("Fetching commit history...")
+                try:
+                    all_commits = list(repo.get_commits(sha=branch_name))
+                except GithubException as e:
+                    raise Exception(f"Failed to fetch commit history: {str(e)}")
                 
                 # Filter out selected commits to remove
                 commit_to_keep = [c for c in all_commits if c.sha not in selected_commits]
@@ -1602,7 +1603,12 @@
                 base_commit = commit_to_keep[-1]
                 
                 # Cherry-pick commits to the temporary branch
-                temp_ref.edit(base_commit.sha, force=True)
+                self.status_var.set(f"Resetting temporary branch to base commit {base_commit.sha[:7]}...")
+                try:
+                    temp_ref.edit(base_commit.sha, force=True)
+                except GithubException as e:
+                    raise Exception(f"Failed to reset temporary branch: {str(e)}")
+                
+                # Cherry-pick each commit to keep in reverse order (oldest to newest)
+                for i, commit in enumerate(reversed(commit_to_keep[:-1])):  # Skip the base commit
+                    self.status_var.set(f"Cherry-picking commit {i+1}/{len(commit_to_keep)-1}: {commit.sha[:7]}...")
+                    try:
+                        # Get the commit data
+                        commit_data = repo.get_git_commit(commit.sha)
+                        tree = commit_data.tree
+                        parents = [base_commit.sha]
+                        
+                        # Create a new commit with the same data
+                        new_commit = repo.create_git_commit(
+                            message=commit_data.message,
+                            tree=tree,
+                            parents=parents
+                        )
+                        
+                        # Update the temp branch reference
+                        temp_ref.edit(new_commit.sha, force=True)
+                        
+                        # Update the base commit for the next iteration
+                        base_commit = repo.get_git_commit(new_commit.sha)
+                    except GithubException as e:
+                        raise Exception(f"Failed to cherry-pick commit {commit.sha[:7]}: {str(e)}")
                 
                 # Update the original branch to point to the new history
-                branch_ref.edit(temp_ref.object.sha, force=True)
+                self.status_var.set("Updating original branch...")
+                try:
+                    branch_ref.edit(temp_ref.object.sha, force=True)
+                except GithubException as e:
+                    raise Exception(f"Failed to update original branch: {str(e)}")
                 
                 # Delete the temporary branch
-                temp_ref.delete()
+                self.status_var.set("Cleaning up temporary branch...")
+                try:
+                    temp_ref.delete()
+                except GithubException as e:
+                    # Log but don't fail if cleanup fails
+                    print(f"Warning: Failed to delete temporary branch: {str(e)}")
                 
                 # Update UI in main thread
                 self.root.after(0, lambda: self.after_commit_removal(len(selected_commits)))
                 
             except Exception as e:
-                raise Exception(f"Failed to remove commits: {str(e)}")
+                error_msg = str(e)
+                # Clean up temporary branch if it exists
+                if temp_ref:
+                    try:
+                        temp_ref.delete()
+                    except:
+                        pass  # Ignore cleanup errors in error handler
+                raise Exception(f"Failed to remove commits: {error_msg}")
